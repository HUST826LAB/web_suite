<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


    <context:component-scan base-package="com.cotech"/>

    <context:property-placeholder location="classpath:/jdbc.properties"/>

    <!-- 配置数据源 使用的是alibaba的数据源 也可以使用 dbcp-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 配置基本的参数-->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小-->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
    </bean>

    <!-- 配置SqlSessionFactory mybatis文件配置 扫描所有的mapper文件-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 加载mybatis的配置文件-->
        <property name="configLocation" value="classpath:/mybatisConfig.xml"/>
        <!--mapper-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>


    <!-- mapper扫描器 spring 与mybatis整合配置-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cotech.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!-- 定义事务管理器 对mybatis操作数据库的控制，spring使用jdbc的事务控制-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源
             dataSource在applicationContext-dao.xml文件中配置-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 通知 配置传播行为-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- aop配置-->
    <aop:config>
        <!-- pointcut:执行service下impl下的所有类的所有方法不管什么参数-->
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.cotech.service.*.*(..))"/>
    </aop:config>

    <!-- 采用CGLIB代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 启用对事物的注解支持-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>